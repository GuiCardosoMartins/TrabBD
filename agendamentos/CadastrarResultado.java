/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package agendamentos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author guilherme
 */
public class CadastrarResultado extends javax.swing.JFrame {

    public CadastrarResultado() {
        initComponents();
    }
    
    private void atualizarListaExames() {
    String consultaSelecionada = (String) listaConsulta.getSelectedItem();
    String idConsultaStr = consultaSelecionada.split(":")[0]; // Mantém como String
    int idConsulta = Integer.parseInt(idConsultaStr); // Converte para Integer
    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        conn = ConexaoBanco.getConnection();

        String sql = "SELECT pe.id_pedido_exame as id, pe.requisicao as nome " +
                     "FROM pedido_exame pe " +
                     "JOIN consulta c ON c.id_consulta = pe.id_consulta " +
                     "WHERE c.id_consulta = ?";
        stmt = conn.prepareStatement(sql);
        stmt.setInt(1, idConsulta); // Passa como Integer
        rs = stmt.executeQuery();

        listaExame.removeAllItems(); 

        if (!rs.isBeforeFirst()) { // Verifica se o ResultSet está vazio
            JOptionPane.showMessageDialog(this, "Nenhum exame encontrado para esta consulta", "Informação", JOptionPane.INFORMATION_MESSAGE);
        } else {
            while (rs.next()) {
                String idExame = rs.getString("id");
                String nomeExame = rs.getString("nome");
                listaExame.addItem(idExame + ": " + nomeExame);
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar exames: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Fecha a conexão e o PreparedStatement
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Erro ao fechar a conexão: " + ex.getMessage());
        }
    }
}


    private void atualizarListaConsultas() {
    String crmMedico = crm.getText();
    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        conn = ConexaoBanco.getConnection();
        
        String sql = "SELECT c.id_consulta as id, c.data as data, e.nome AS especialidade " +
                     "FROM consulta c " +
                     "JOIN contrato ct ON c.id_contrato = ct.id_contrato " +
                     "JOIN medico m ON ct.id_medico = m.id_medico " +
                     "JOIN especialidade e ON ct.id_especialidade = e.id_especialidade " +
                     "WHERE c.status = 'Realizada' and m.crm = ?";
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, crmMedico);
        rs = stmt.executeQuery();
        
        listaConsulta.removeAllItems(); // Limpa o JComboBox antes de adicionar novos itens
        
       if (!rs.isBeforeFirst()) { // Verifica se o ResultSet está vazio
            JOptionPane.showMessageDialog(this, "Nenhuma consulta realizada encontrada", "Informação", JOptionPane.INFORMATION_MESSAGE);
        } else {
            while (rs.next()) {
                String id = rs.getString("id");
                String dataConsulta = rs.getString("data");
                String especialidade = rs.getString("especialidade");
                listaConsulta.addItem(id + ": " + dataConsulta + " - " + especialidade);
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar consultas: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Fecha a conexão e o PreparedStatement
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Erro ao fechar a conexão: " + ex.getMessage());
        }
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        crm = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        listaConsulta = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        listaExame = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        observacaoResultado = new javax.swing.JTextArea();
        botaoCadastrarResult = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        crm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crmActionPerformed(evt);
            }
        });

        jLabel1.setText("Insera seu CRM");

        listaConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaConsultaActionPerformed(evt);
            }
        });

        jLabel2.setText("Selecione a consulta");

        jLabel3.setText("Selecione o exame da consulta");

        jLabel4.setText("Observações sobre o resultado");

        observacaoResultado.setColumns(20);
        observacaoResultado.setRows(5);
        jScrollPane1.setViewportView(observacaoResultado);

        botaoCadastrarResult.setText("Cadastrar Resultado de Exame");
        botaoCadastrarResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCadastrarResultActionPerformed(evt);
            }
        });

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(crm, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(listaConsulta, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(listaExame, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(botaoCadastrarResult))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jButton1)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaExame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(botaoCadastrarResult)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crmActionPerformed
        atualizarListaConsultas();
    }//GEN-LAST:event_crmActionPerformed

    private void listaConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaConsultaActionPerformed
        atualizarListaExames();
    }//GEN-LAST:event_listaConsultaActionPerformed

    private void cadastrarResultado(String observacao, int idPedidoExame) {
    Connection conn = null;
    PreparedStatement stmt = null;

    try {
        conn = ConexaoBanco.getConnection();
        String sql = "INSERT INTO resultado (observacoes, id_pedido_exame) VALUES (?, ?)";
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, observacao);
        stmt.setInt(2, idPedidoExame);
        
        int rowsAffected = stmt.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Resultado cadastrado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar o resultado.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao cadastrar resultado: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Fecha a conexão e o PreparedStatement
        try {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Erro ao fechar a conexão: " + ex.getMessage());
        }
    }
    }
    
    private void botaoCadastrarResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCadastrarResultActionPerformed
        String observacao = observacaoResultado.getText();
        String exameSelecionado = (String) listaExame.getSelectedItem();
    int idPedidoExame = Integer.parseInt(exameSelecionado.split(":")[0]); // Extrai o ID do exame

    // Chama o método para cadastrar o resultado
    cadastrarResultado(observacao, idPedidoExame);
    }//GEN-LAST:event_botaoCadastrarResultActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DashboardMedico.voltar();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastrarResultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastrarResultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastrarResultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastrarResultado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastrarResultado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCadastrarResult;
    private javax.swing.JTextField crm;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> listaConsulta;
    private javax.swing.JComboBox<String> listaExame;
    private javax.swing.JTextArea observacaoResultado;
    // End of variables declaration//GEN-END:variables
}
