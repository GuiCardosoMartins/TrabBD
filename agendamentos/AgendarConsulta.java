/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package agendamentos;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.JOptionPane;

/**
 *
 * @author guilherme
 */
public class AgendarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form AgendarConsulta
     */
    public AgendarConsulta() {
        initComponents();
        preencherListaUBSs();
        adicionarActionListener();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listaEspecialidadesUBS = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        listaUBSs = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        dataConsulta = new javax.swing.JTextField();
        botaoAgendar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        sus = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listaEspecialidadesUBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaEspecialidadesUBSActionPerformed(evt);
            }
        });

        jLabel1.setText("Selecione uma Especialidade");

        jLabel3.setText("Selecione a UBS");

        jLabel4.setText("Data para consulta");

        dataConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataConsultaActionPerformed(evt);
            }
        });

        botaoAgendar.setText("Agendar");
        botaoAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAgendarActionPerformed(evt);
            }
        });

        jLabel5.setText("Digite seu Número do SUS");

        jLabel6.setText("AGENDAMENTO");

        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3)
                                .addComponent(listaUBSs, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(dataConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(listaEspecialidadesUBS, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)))
                        .addGap(82, 242, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(sus, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButton1))
                            .addComponent(botaoAgendar))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(34, 34, 34)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaUBSs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listaEspecialidadesUBS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(13, 13, 13)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoAgendar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listaEspecialidadesUBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaEspecialidadesUBSActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaEspecialidadesUBSActionPerformed

    private void dataConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataConsultaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataConsultaActionPerformed
    
    private void preencherListaUBSs() {
    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        // Estabelece conexão com o banco de dados
        conn = ConexaoBanco.getConnection();
        
        // Query SQL para buscar todas as UBSs
        String sql = "SELECT nome FROM ubs";
        stmt = conn.prepareStatement(sql);
        rs = stmt.executeQuery();
        
        // Limpa a lista atual de UBSs
        listaUBSs.removeAllItems();
        
        // Adiciona as UBSs à JComboBox
        while (rs.next()) {
            listaUBSs.addItem(rs.getString("nome"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar UBSs: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Fecha a conexão e o PreparedStatement
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Erro ao fechar a conexão: " + ex.getMessage());
        }
    }
}
    
    private void adicionarActionListener() {
        listaUBSs.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String nomeUBS = (String) listaUBSs.getSelectedItem();
                if (nomeUBS != null) {
                    preencherListaEspecialidades(nomeUBS);
                }
            }
        });
    }
private void preencherListaEspecialidades(String nomeUBS) {
    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    try {
        // Estabelece conexão com o banco de dados
        conn = ConexaoBanco.getConnection();
        
        // Query SQL para buscar as especialidades da UBS selecionada
        String sql = "SELECT e.nome FROM especialidade e "
                   + "JOIN contrato c ON e.id_especialidade = c.id_especialidade "
                   + "JOIN ubs u ON c.id_ubs = u.id_ubs "
                   + "WHERE u.nome = ?";
        stmt = conn.prepareStatement(sql);
        stmt.setString(1, nomeUBS);
        rs = stmt.executeQuery();
        
        // Limpa a lista atual de especialidades
        listaEspecialidadesUBS.removeAllItems();
        
        // Adiciona as especialidades à JComboBox
        while (rs.next()) {
            listaEspecialidadesUBS.addItem(rs.getString("nome"));
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao carregar especialidades: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Fecha a conexão e o PreparedStatement
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Erro ao fechar a conexão: " + ex.getMessage());
        }
    }
}


    private void botaoAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAgendarActionPerformed

    String dataConsultaStr = dataConsulta.getText();
    String especialidade = (String) listaEspecialidadesUBS.getSelectedItem();
    String ubs = (String) listaUBSs.getSelectedItem();
    String susPaciente = sus.getText(); 
    String status = "Agendada"; 

    Connection conn = null;
    PreparedStatement stmtPaciente = null;
    PreparedStatement stmtConsulta = null;
    PreparedStatement stmtContrato = null;
    ResultSet rs = null;

    try {
        conn = ConexaoBanco.getConnection();
        
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate localDateConsulta = LocalDate.parse(dataConsultaStr, formatter);
        java.sql.Date sqlDateConsulta = java.sql.Date.valueOf(localDateConsulta);

        String sqlPaciente = "SELECT p.id_paciente FROM paciente p WHERE p.numero_sus = ?";
        stmtPaciente = conn.prepareStatement(sqlPaciente);
        stmtPaciente.setString(1, susPaciente);
        rs = stmtPaciente.executeQuery();
        
        if (rs.next()) {
            long idPaciente = rs.getLong("id_paciente");

            rs.close();
            stmtPaciente.close();

            String sqlContrato = "SELECT c.id_contrato FROM contrato c "
                               + "JOIN especialidade e ON c.id_especialidade = e.id_especialidade "
                               + "JOIN ubs u ON c.id_ubs = u.id_ubs "
                               + "WHERE e.nome = ? AND u.nome = ?";
            stmtContrato = conn.prepareStatement(sqlContrato);
            stmtContrato.setString(1, especialidade);
            stmtContrato.setString(2, ubs);
            rs = stmtContrato.executeQuery();
            
            if (rs.next()) {
                long idContrato = rs.getLong("id_contrato");

                String sqlConsulta = "INSERT INTO consulta (data, status, id_paciente, id_contrato) VALUES (?, ?, ?, ?)";
                stmtConsulta = conn.prepareStatement(sqlConsulta);
                stmtConsulta.setDate(1, sqlDateConsulta);
                stmtConsulta.setString(2, status);
                stmtConsulta.setLong(3, idPaciente);
                stmtConsulta.setLong(4, idContrato);
                stmtConsulta.executeUpdate();

                JOptionPane.showMessageDialog(this, "Consulta agendada com sucesso!");
            } else {
                JOptionPane.showMessageDialog(this, "Não foi possível encontrar um contrato para a especialidade e UBS selecionadas.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "CPF não cadastrado!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException | DateTimeParseException ex) {
        JOptionPane.showMessageDialog(this, "Erro ao agendar a consulta: " + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmtConsulta != null) stmtConsulta.close();
            if (stmtContrato != null) stmtContrato.close();
            if (stmtPaciente != null) stmtPaciente.close();
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            System.out.println("Erro ao fechar a conexão: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_botaoAgendarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DashboardPaciente.voltar();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAgendar;
    private javax.swing.JTextField dataConsulta;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox<String> listaEspecialidadesUBS;
    private javax.swing.JComboBox<String> listaUBSs;
    private javax.swing.JTextField sus;
    // End of variables declaration//GEN-END:variables
}
